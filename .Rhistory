emptyvec <- rep(NA, length(1:dim(R_c_vecs)[1]))
CRvec <- emptyvec
APvec <- emptyvec
RDTcostvec <- emptyvec
RGcostvec_expected <- emptyvec
WScostvec <- emptyvec
WScostvec_failureprob <- emptyvec
WScostvec_expected <- emptyvec
costvec <- emptyvec
nvec_optimal <- emptyvec
for(i in 1:dim(R_c_vecs)[1]){
#initialize n
n <- (min(cvec) + 1)
R <- R_c_vecs[i, 'R']
c <- R_c_vecs[i, 'c']
tmp <- pbinom(c, n, pi)
#CR
CRvec[i] <- 1 - t(matrix(tmp)) %*% matrix(sapply(pi, bIndicator, R)) / sum(tmp)
while (CRvec[i] > thres_CR){
n <- n + 1
tmp <- pbinom(c, n, pi)
CRvec[i] <- 1 - t(matrix(tmp)) %*% matrix(sapply(pi, bIndicator, R)) / sum(tmp)
}
#Stop and obtain the optimal n
nvec_optimal[i] <- n
#AP
APvec[i] <- sum(tmp) / length(tmp)
#RDT cost
RDTcostvec[i] <- Cf + Cv * n
#Expected RG cost
RGcostvec_expected[i] <- G * (1 - APvec[i])
#Expected WS cost
WScostvec_failureprob[i] <- sum(tmp * pi) / sum(tmp)
WScostvec[i] <- Cw * N * WScostvec_failureprob[i]
WScostvec_expected[i] <- WScostvec[i] * APvec[i]
#
costvec[i] <- RDTcostvec[i] + RGcostvec_expected[i] + WScostvec_expected[i]
}
result <- cbind(nvec_optimal, R_c_vecs, CRvec, APvec, RDTcostvec, G, RGcostvec_expected,
WScostvec, WScostvec_failureprob, WScostvec_expected, costvec)
colnames(result) <- c('n', 'R', 'c', 'CR', 'AP',
'RDT Cost', 'RG Cost', 'RG Cost Expected',
'WS Cost', 'WS Failure Probability', 'WS Cost Expected',  'Overall Cost')
return(result[ , par])
}
}
bdata_generator <- function(Cf, Cv, nvec, G, Cw, N, Rvec, cvec, pi,
par = all(), option = c('all'), thres_CR){
#To get all test plans data for different combinations of n, c, R
if (option = c('all')){
#exapnd all possible combinations of n, c, R
n_R_c_vecs <- expand.grid(nvec, Rvec, cvec)
colnames(n_R_c_vecs) <- c('n', 'R', 'c')
#create empty vectors
emptyvec <- rep(NA, length(1:dim(n_R_c_vecs)[1]))
CRvec <- emptyvec
APvec <- emptyvec
RDTcostvec <- emptyvec
RGcostvec_expected <- emptyvec
WScostvec <- emptyvec
WScostvec_failureprob <- emptyvec
WScostvec_expected <- emptyvec
costvec <- emptyvec
for(i in 1:dim(n_R_c_vecs)[1]){
n <- n_R_c_vecs[i, 'n']
R <- n_R_c_vecs[i, 'R']
c <- n_R_c_vecs[i, 'c']
tmp <- pbinom(c, n, pi)
#CR
CRvec[i] <- 1 - t(matrix(tmp)) %*% matrix(sapply(pi, bIndicator, R)) / sum(tmp)
#AP
APvec[i] <- sum(tmp) / length(tmp)
#RDT cost
RDTcostvec[i] <- Cf + Cv * n
#Expected RG cost
RGcostvec_expected[i] <- G * (1 - APvec[i])
#Expected WS cost
WScostvec_failureprob[i] <- sum(tmp * pi) / sum(tmp)
WScostvec[i] <- Cw * N * WScostvec_failureprob[i]
WScostvec_expected[i] <- WScostvec[i] * APvec[i]
#
costvec[i] <- RDTcostvec[i] + RGcostvec_expected[i] + WScostvec_expected[i]
}
result <- cbind(n_R_c_vecs, CRvec, APvec, RDTcostvec, G, RGcostvec_expected,
WScostvec, WScostvec_failureprob, WScostvec_expected, costvec)
colnames(result) <- c('n', 'R', 'c', 'CR', 'AP',
'RDT Cost', 'RG Cost', 'RG Cost Expected',
'WS Cost', 'WS Failure Probability', 'WS Cost Expected',  'Overall Cost')
return(result[ , par])
}
#To get all test plans data for different combinations of n, c, R
else if (option = c('optimal')){
#exapnd all possible combinations of n, c, R
R_c_vecs <- expand.grid(Rvec, cvec)
colnames(R_c_vecs) <- c('R', 'c')
#create empty vectors
emptyvec <- rep(NA, length(1:dim(R_c_vecs)[1]))
CRvec <- emptyvec
APvec <- emptyvec
RDTcostvec <- emptyvec
RGcostvec_expected <- emptyvec
WScostvec <- emptyvec
WScostvec_failureprob <- emptyvec
WScostvec_expected <- emptyvec
costvec <- emptyvec
nvec_optimal <- emptyvec
for(i in 1:dim(R_c_vecs)[1]){
#initialize n
n <- (min(cvec) + 1)
R <- R_c_vecs[i, 'R']
c <- R_c_vecs[i, 'c']
tmp <- pbinom(c, n, pi)
#CR
CRvec[i] <- 1 - t(matrix(tmp)) %*% matrix(sapply(pi, bIndicator, R)) / sum(tmp)
while (CRvec[i] > thres_CR){
n <- n + 1
tmp <- pbinom(c, n, pi)
CRvec[i] <- 1 - t(matrix(tmp)) %*% matrix(sapply(pi, bIndicator, R)) / sum(tmp)
}
#Stop and obtain the optimal n
nvec_optimal[i] <- n
#AP
APvec[i] <- sum(tmp) / length(tmp)
#RDT cost
RDTcostvec[i] <- Cf + Cv * n
#Expected RG cost
RGcostvec_expected[i] <- G * (1 - APvec[i])
#Expected WS cost
WScostvec_failureprob[i] <- sum(tmp * pi) / sum(tmp)
WScostvec[i] <- Cw * N * WScostvec_failureprob[i]
WScostvec_expected[i] <- WScostvec[i] * APvec[i]
#
costvec[i] <- RDTcostvec[i] + RGcostvec_expected[i] + WScostvec_expected[i]
}
result <- cbind(nvec_optimal, R_c_vecs, CRvec, APvec, RDTcostvec, G, RGcostvec_expected,
WScostvec, WScostvec_failureprob, WScostvec_expected, costvec)
colnames(result) <- c('n', 'R', 'c', 'CR', 'AP',
'RDT Cost', 'RG Cost', 'RG Cost Expected',
'WS Cost', 'WS Failure Probability', 'WS Cost Expected',  'Overall Cost')
return(result[ , par])
}
}
bdata_generator <- function(Cf, Cv, nvec, G, Cw, N, Rvec, cvec, pi,
par = all(), option = c('all'), thres_CR){
#To get all test plans data for different combinations of n, c, R
if (option == c('all')){
#exapnd all possible combinations of n, c, R
n_R_c_vecs <- expand.grid(nvec, Rvec, cvec)
colnames(n_R_c_vecs) <- c('n', 'R', 'c')
#create empty vectors
emptyvec <- rep(NA, length(1:dim(n_R_c_vecs)[1]))
CRvec <- emptyvec
APvec <- emptyvec
RDTcostvec <- emptyvec
RGcostvec_expected <- emptyvec
WScostvec <- emptyvec
WScostvec_failureprob <- emptyvec
WScostvec_expected <- emptyvec
costvec <- emptyvec
for(i in 1:dim(n_R_c_vecs)[1]){
n <- n_R_c_vecs[i, 'n']
R <- n_R_c_vecs[i, 'R']
c <- n_R_c_vecs[i, 'c']
tmp <- pbinom(c, n, pi)
#CR
CRvec[i] <- 1 - t(matrix(tmp)) %*% matrix(sapply(pi, bIndicator, R)) / sum(tmp)
#AP
APvec[i] <- sum(tmp) / length(tmp)
#RDT cost
RDTcostvec[i] <- Cf + Cv * n
#Expected RG cost
RGcostvec_expected[i] <- G * (1 - APvec[i])
#Expected WS cost
WScostvec_failureprob[i] <- sum(tmp * pi) / sum(tmp)
WScostvec[i] <- Cw * N * WScostvec_failureprob[i]
WScostvec_expected[i] <- WScostvec[i] * APvec[i]
#
costvec[i] <- RDTcostvec[i] + RGcostvec_expected[i] + WScostvec_expected[i]
}
result <- cbind(n_R_c_vecs, CRvec, APvec, RDTcostvec, G, RGcostvec_expected,
WScostvec, WScostvec_failureprob, WScostvec_expected, costvec)
colnames(result) <- c('n', 'R', 'c', 'CR', 'AP',
'RDT Cost', 'RG Cost', 'RG Cost Expected',
'WS Cost', 'WS Failure Probability', 'WS Cost Expected',  'Overall Cost')
return(result[ , par])
}
#To get all test plans data for different combinations of n, c, R
else if (option == c('optimal')){
#exapnd all possible combinations of n, c, R
R_c_vecs <- expand.grid(Rvec, cvec)
colnames(R_c_vecs) <- c('R', 'c')
#create empty vectors
emptyvec <- rep(NA, length(1:dim(R_c_vecs)[1]))
CRvec <- emptyvec
APvec <- emptyvec
RDTcostvec <- emptyvec
RGcostvec_expected <- emptyvec
WScostvec <- emptyvec
WScostvec_failureprob <- emptyvec
WScostvec_expected <- emptyvec
costvec <- emptyvec
nvec_optimal <- emptyvec
for(i in 1:dim(R_c_vecs)[1]){
#initialize n
n <- (min(cvec) + 1)
R <- R_c_vecs[i, 'R']
c <- R_c_vecs[i, 'c']
tmp <- pbinom(c, n, pi)
#CR
CRvec[i] <- 1 - t(matrix(tmp)) %*% matrix(sapply(pi, bIndicator, R)) / sum(tmp)
while (CRvec[i] > thres_CR){
n <- n + 1
tmp <- pbinom(c, n, pi)
CRvec[i] <- 1 - t(matrix(tmp)) %*% matrix(sapply(pi, bIndicator, R)) / sum(tmp)
}
#Stop and obtain the optimal n
nvec_optimal[i] <- n
#AP
APvec[i] <- sum(tmp) / length(tmp)
#RDT cost
RDTcostvec[i] <- Cf + Cv * n
#Expected RG cost
RGcostvec_expected[i] <- G * (1 - APvec[i])
#Expected WS cost
WScostvec_failureprob[i] <- sum(tmp * pi) / sum(tmp)
WScostvec[i] <- Cw * N * WScostvec_failureprob[i]
WScostvec_expected[i] <- WScostvec[i] * APvec[i]
#
costvec[i] <- RDTcostvec[i] + RGcostvec_expected[i] + WScostvec_expected[i]
}
result <- cbind(nvec_optimal, R_c_vecs, CRvec, APvec, RDTcostvec, G, RGcostvec_expected,
WScostvec, WScostvec_failureprob, WScostvec_expected, costvec)
colnames(result) <- c('n', 'R', 'c', 'CR', 'AP',
'RDT Cost', 'RG Cost', 'RG Cost Expected',
'WS Cost', 'WS Failure Probability', 'WS Cost Expected',  'Overall Cost')
return(result[ , par])
}
}
boptimal_cost <- function(Cf, Cv, nvec, G, Cw, N, Rvec, cvec, pi, thres_CR){
#generate
data <- bdata_generator(Cf, Cv, nvec, G, Cw, N, Rvec, cvec, pi,
par = all(), option = c('optimal'), thres_CR)
#Generate optimal test plans
optimal_index <- which(data[, 'Overall Cost'] == min(data[, 'Overall Cost'][which(data[, 'CR'] <= thres_CR)]))
#
results <- data[optimal_index, ]
return(results)
}
boptimal_cost(Cf = 10, Cv = 10, nvec = nvec, G = 100, Cw = 10,
N = 100, Rvec = Rvec, cvec = cvec, pi = pi, thres_CR = 0.5);
boptimal_cost(Cf = 10, Cv = 10, nvec = nvec, G = 100, Cw = 10,
N = 100, Rvec = Rvec, cvec = cvec, pi = pi, thres_CR = 0.5);
boptimal_cost <- function(Cf, Cv, nvec, G, Cw, N, Rvec, cvec, pi, thres_CR){
#generate
data <- bdata_generator(Cf, Cv, nvec, G, Cw, N, Rvec, cvec, pi,
par = all(), option = c('optimal'), thres_CR)
#Generate optimal test plans
optimal_index <- which(data[, 'Overall Cost'] == min(data[, 'Overall Cost']))
return(data[optimal_index, ])
}
boptimal_cost(Cf = 10, Cv = 10, nvec = nvec, G = 100, Cw = 10,
N = 100, Rvec = Rvec, cvec = cvec, pi = pi, thres_CR = 0.5);
}
bdata_generator <- function(Cf, Cv, nvec, G, Cw, N, Rvec, cvec, pi,
par = all(), option = c('optimal'), thres_CR){
#To get all test plans data for different combinations of n, c, R
if (option == c('all')){
#exapnd all possible combinations of n, c, R
n_R_c_vecs <- expand.grid(nvec, Rvec, cvec)
colnames(n_R_c_vecs) <- c('n', 'R', 'c')
#create empty vectors
emptyvec <- rep(NA, length(1:dim(n_R_c_vecs)[1]))
CRvec <- emptyvec
APvec <- emptyvec
RDTcostvec <- emptyvec
RGcostvec_expected <- emptyvec
WScostvec <- emptyvec
WScostvec_failureprob <- emptyvec
WScostvec_expected <- emptyvec
costvec <- emptyvec
for(i in 1:dim(n_R_c_vecs)[1]){
n <- n_R_c_vecs[i, 'n']
R <- n_R_c_vecs[i, 'R']
c <- n_R_c_vecs[i, 'c']
tmp <- pbinom(c, n, pi)
#CR
CRvec[i] <- 1 - t(matrix(tmp)) %*% matrix(sapply(pi, bIndicator, R)) / sum(tmp)
#AP
APvec[i] <- sum(tmp) / length(tmp)
#RDT cost
RDTcostvec[i] <- Cf + Cv * n
#Expected RG cost
RGcostvec_expected[i] <- G * (1 - APvec[i])
#Expected WS cost
WScostvec_failureprob[i] <- sum(tmp * pi) / sum(tmp)
WScostvec[i] <- Cw * N * WScostvec_failureprob[i]
WScostvec_expected[i] <- WScostvec[i] * APvec[i]
#
costvec[i] <- RDTcostvec[i] + RGcostvec_expected[i] + WScostvec_expected[i]
}
result <- cbind(n_R_c_vecs, CRvec, APvec, RDTcostvec, G, RGcostvec_expected,
WScostvec, WScostvec_failureprob, WScostvec_expected, costvec)
colnames(result) <- c('n', 'R', 'c', 'CR', 'AP',
'RDT Cost', 'RG Cost', 'RG Cost Expected',
'WS Cost', 'WS Failure Probability', 'WS Cost Expected',  'Overall Cost')
return(result[ , par])
}
#To get all test plans data for different combinations of n, c, R
else if (option == c('optimal')){
#exapnd all possible combinations of n, c, R
R_c_vecs <- expand.grid(Rvec, cvec)
colnames(R_c_vecs) <- c('R', 'c')
#create empty vectors
emptyvec <- rep(NA, length(1:dim(R_c_vecs)[1]))
CRvec <- emptyvec
APvec <- emptyvec
RDTcostvec <- emptyvec
RGcostvec_expected <- emptyvec
WScostvec <- emptyvec
WScostvec_failureprob <- emptyvec
WScostvec_expected <- emptyvec
costvec <- emptyvec
nvec_optimal <- emptyvec
for(i in 1:dim(R_c_vecs)[1]){
R <- R_c_vecs[i, 'R']
c <- R_c_vecs[i, 'c']
#obtain the optimal n
nvec_optimal[i] <- boptimal_n(c, pi, R, thres_CR)
n <- nvec_optimal[i]
tmp <- pbinom(c, n, pi)
#CR
CRvec[i] <- 1 - t(matrix(tmp)) %*% matrix(sapply(pi, bIndicator, R)) / sum(tmp)
#AP
APvec[i] <- sum(tmp) / length(tmp)
#RDT cost
RDTcostvec[i] <- Cf + Cv * n
#Expected RG cost
RGcostvec_expected[i] <- G * (1 - APvec[i])
#Expected WS cost
WScostvec_failureprob[i] <- sum(tmp * pi) / sum(tmp)
WScostvec[i] <- Cw * N * WScostvec_failureprob[i]
WScostvec_expected[i] <- WScostvec[i] * APvec[i]
#
costvec[i] <- RDTcostvec[i] + RGcostvec_expected[i] + WScostvec_expected[i]
}
result <- cbind(nvec_optimal, R_c_vecs, CRvec, APvec, RDTcostvec, G, RGcostvec_expected,
WScostvec, WScostvec_failureprob, WScostvec_expected, costvec)
colnames(result) <- c('n', 'R', 'c', 'CR', 'AP',
'RDT Cost', 'RG Cost', 'RG Cost Expected',
'WS Cost', 'WS Failure Probability', 'WS Cost Expected',  'Overall Cost')
return(result[ , par])
}
}
bdata_generator(Cf = 10, Cv = 10, nvec = nvec, G = 10000, Cw = 10,
N = 100, Rvec = Rvec, cvec = cvec, pi = pi,
par = c('n', 'R', 'c', 'CR', 'AP'), option = c("optimal"), thres_CR = 0.05)
boptimal_cost <- function(Cf, Cv, nvec, G, Cw, N, Rvec, cvec, pi, thres_CR){
#generate
data <- bdata_generator(Cf, Cv, nvec, G, Cw, N, Rvec, cvec, pi,
par = all(), option = c('optimal'), thres_CR)
#Generate optimal test plans
optimal_index <- which(data[, 'Overall Cost'] == min(data[, 'Overall Cost']))
return(data[optimal_index, ])
}
boptimal_cost(Cf = 10, Cv = 10, nvec = nvec, G = 100, Cw = 10,
N = 100, Rvec = Rvec, cvec = cvec, pi = pi, thres_CR = 0.5);
devtools::use_vignette("Examples")
library(devtools)
devtools::use_vignette("Examples")
usethis::use_vignette("Examples")
library(BRDT)
###Generate the prior distribution of failure probability
##Beta is conjugate prior to binomial distribution
#Get the non-informative prior Beta(1, 1)
pi <- pi_MCSim_beta(M = 5000, seed = 10, a = 1, b = 1)
#Get the consumer's risk
n = 10
R = 0.8
c = 2
b_CR <- bconsumerrisk(n = n, c = c, pi = pi, R = R)
print(b_CR)
##As n increases, CR decreases
#Get the optimal test sample size
thres_CR = 0.05 #CR < 0.05
b_n <- boptimal_n(c = c, pi = pi, R = R, thres_CR = thres_CR)
print(b_n)
#RDT cost
Cf = 0
Cv = 10
n_optimal = 24
RDTcost <- bcost_RDT(Cf = Cf, Cv = Cv, n = n_optimal)
print(RDTcost)
#RG Cost
G = 10000 #G can be obtained from specific reliability growth models
RGcost = bcost_RG(G = G)
print(RGcost)
#WS Cost
Cw = 10
N = 1
n_optimal = 24
WScost <- bcost_WS(Cw = 10, N = 1, n = n_optimal, c = 1, pi = pi);
print(WScost[1]) #expected failure probability
print(WScost[2]) #expected warranty services cost
#Expected overall cost
Overall_cost <- bcost_expected(Cf = Cf, Cv = Cv, n = n_optimal, G = G, Cw = Cw, N = N, c = c, pi = pi)
print(Overall_cost)
boptimal_cost <- function(Cf, Cv, G, Cw, N, Rvec, cvec, pi, thres_CR){
#generate minimum test sample size test plans
data <- bdata_generator(Cf, Cv, nvec = NULL, G, Cw, N, Rvec, cvec, pi,
par = all(), option = c('optimal'), thres_CR)
#Generate optimal test plans with minimum costs
optimal_index <- which(data[, 'Overall Cost'] == min(data[, 'Overall Cost']))
return(data[optimal_index, ])
}
boptimal_cost(Cf = 10, Cv = 10, nvec = nvec, G = 100, Cw = 10,
N = 100, Rvec = Rvec, cvec = cvec, pi = pi, thres_CR = 0.5);
boptimal_cost <- function(Cf, Cv, G, Cw, N, Rvec, cvec, pi, thres_CR){
#generate minimum test sample size test plans
data <- bdata_generator(Cf, Cv, nvec = seq(0, 10, 1), G, Cw, N, Rvec, cvec, pi,
par = all(), option = c('optimal'), thres_CR)
#Generate optimal test plans with minimum costs
optimal_index <- which(data[, 'Overall Cost'] == min(data[, 'Overall Cost']))
return(data[optimal_index, ])
}
seq(0,0,0)
boptimal_cost <- function(Cf, Cv, G, Cw, N, Rvec, cvec, pi, thres_CR){
#generate minimum test sample size test plans
data <- bdata_generator(Cf, Cv, nvec = seq(0, 0, 0), G, Cw, N, Rvec, cvec, pi,
par = all(), option = c('optimal'), thres_CR)
#Generate optimal test plans with minimum costs
optimal_index <- which(data[, 'Overall Cost'] == min(data[, 'Overall Cost']))
return(data[optimal_index, ])
}
boptimal_cost(Cf = 10, Cv = 10, nvec = nvec, G = 100, Cw = 10,
N = 100, Rvec = Rvec, cvec = cvec, pi = pi, thres_CR = 0.5);
boptimal_cost <- function(Cf, Cv, G, Cw, N, Rvec, cvec, pi, thres_CR){
#generate minimum test sample size test plans
data <- bdata_generator(Cf, Cv, nvec = seq(0, 10, 1), G, Cw, N, Rvec, cvec, pi,
par = all(), option = c('optimal'), thres_CR)
#Generate optimal test plans with minimum costs
optimal_index <- which(data[, 'Overall Cost'] == min(data[, 'Overall Cost']))
return(data[optimal_index, ])
}
bdata_generator(Cf, Cv, nvec = seq(0, 10, 1), G, Cw, N, Rvec, cvec, pi,
par = all(), option = c('optimal'), thres_CR)
boptimal_cost <- function(Cf, Cv, G, Cw, N, Rvec, cvec, pi, thres_CR){
#generate minimum test sample size test plans
data <- bdata_generator(Cf, Cv, nvec = seq(0, 10, 1), G, Cw, N, Rvec, cvec, pi,
par = all(), option = c('optimal'), thres_CR)
#Generate optimal test plans with minimum costs
optimal_index <- which(data[, 'Overall Cost'] == min(data[, 'Overall Cost']))
return(data[optimal_index, ])
}
boptimal_cost(Cf = 10, Cv = 10, nvec = nvec, G = 100, Cw = 10,
N = 100, Rvec = Rvec, cvec = cvec, pi = pi, thres_CR = 0.5);
boptimal_cost <- function(Cf, Cv, G, Cw, N, Rvec, cvec, pi, thres_CR){
#generate minimum test sample size test plans
data <- bdata_generator(Cf, Cv, seq(0, 10, 1), G, Cw, N, Rvec, cvec, pi,
par = all(), option = c('optimal'), thres_CR)
#Generate optimal test plans with minimum costs
optimal_index <- which(data[, 'Overall Cost'] == min(data[, 'Overall Cost']))
return(data[optimal_index, ])
}
boptimal_cost(Cf = 10, Cv = 10, nvec = nvec, G = 100, Cw = 10,
N = 100, Rvec = Rvec, cvec = cvec, pi = pi, thres_CR = 0.5);
boptimal_cost(Cf = 10, Cv = 10, G = 100, Cw = 10,
N = 100, Rvec = Rvec, cvec = cvec, pi = pi, thres_CR = 0.5);
boptimal_cost <- function(Cf, Cv, G, Cw, N, Rvec, cvec, pi, thres_CR){
#generate minimum test sample size test plans
data <- bdata_generator(Cf, Cv, nvec = seq(0, 10, 1), G, Cw, N, Rvec, cvec, pi,
par = all(), option = c('optimal'), thres_CR)
#Generate optimal test plans with minimum costs
optimal_index <- which(data[, 'Overall Cost'] == min(data[, 'Overall Cost']))
return(data[optimal_index, ])
}
boptimal_cost(Cf = 10, Cv = 10, G = 100, Cw = 10,
N = 100, Rvec = Rvec, cvec = cvec, pi = pi, thres_CR = 0.5);
Rvec <- seq(0.8, 0.85, 0.01)
cvec <- seq(0, 2, 1)
Plan_optimal_cost <- boptimal_cost(Cf = 10, Cv = 10, G = 100, Cw = 10, N = 100, Rvec = Rvec, cvec = cvec, pi = pi, thres_CR = 0.5)
Rvec <- seq(0.8, 0.85, 0.01)
cvec <- seq(0, 2, 1)
Plan_optimal_cost <- boptimal_cost(Cf = 10, Cv = 10, G = 100, Cw = 10, N = 100, Rvec = Rvec, cvec = cvec, pi = pi, thres_CR = 0.5)
print(Plan_optiomal_cost)
Rvec <- seq(0.8, 0.85, 0.01)
cvec <- seq(0, 2, 1)
Plan_optimal_cost <- boptimal_cost(Cf = 10, Cv = 10, G = 100, Cw = 10, N = 100, Rvec = Rvec, cvec = cvec, pi = pi, thres_CR = 0.5)
print(Plan_optimal_cost)
nvec <- seq(0, 10, 1)
Rvec <- seq(0.8, 0.85, 0.01)
cvec <- seq(0, 2, 1)
pi <- pi_MCSim_beta(M = 5000, seed = 10, a = 1, b = 1)
data <- bdata_generator(Cf = 10, Cv = 10, nvec = nvec, G = 10000, Cw = 10, N = 100, Rvec = Rvec, cvec = cvec, pi = pi,par = c('n', 'R', 'c', 'CR', 'AP'), option = c("optimal"), thres_CR = 0.05)
nvec <- seq(0, 10, 1)
Rvec <- seq(0.8, 0.85, 0.01)
cvec <- seq(0, 2, 1)
pi <- pi_MCSim_beta(M = 5000, seed = 10, a = 1, b = 1)
#Get data from all combinations of n, c, R
data_all <- bdata_generator(Cf = 10, Cv = 10, nvec = nvec, G = 10000, Cw = 10, N = 100, Rvec = Rvec, cvec = cvec, pi = pi,par = all(), option = c("all"), thres_CR = 0.05)
#Get data with optimal test sample size and minimum overall costs from all combinations of c, R
data_all <- bdata_generator(Cf = 10, Cv = 10, nvec = nvec, G = 10000, Cw = 10, N = 100, Rvec = Rvec, cvec = cvec, pi = pi,par = all(), option = c("optimal"), thres_CR = 0.05)
nvec <- seq(0, 10, 1)
Rvec <- seq(0.8, 0.85, 0.01)
cvec <- seq(0, 2, 1)
pi <- pi_MCSim_beta(M = 5000, seed = 10, a = 1, b = 1)
#Get data from all combinations of n, c, R
data_all <- bdata_generator(Cf = 10, Cv = 10, nvec = nvec, G = 10000, Cw = 10, N = 100, Rvec = Rvec, cvec = cvec, pi = pi,par = all(), option = c("all"), thres_CR = 0.05)
head(data_all)
#Get data with optimal test sample size and minimum overall costs from all combinations of c, R
data_optimal <- bdata_generator(Cf = 10, Cv = 10, nvec = nvec, G = 10000, Cw = 10, N = 100, Rvec = Rvec, cvec = cvec, pi = pi,par = all(), option = c("optimal"), thres_CR = 0.05)
head(data_optimal)
library(MSRDT)
